I"ô<ul id="markdown-toc">
  <li><a href="#æ•°ç»„é“¾è¡¨ç¬”è®°" id="markdown-toc-æ•°ç»„é“¾è¡¨ç¬”è®°">æ•°ç»„&amp;é“¾è¡¨ç¬”è®°</a>    <ul>
      <li><a href="#leecode" id="markdown-toc-leecode">leecode</a></li>
    </ul>
  </li>
</ul>

<h3 id="æ•°ç»„é“¾è¡¨ç¬”è®°">æ•°ç»„&amp;é“¾è¡¨ç¬”è®°</h3>

<h4 id="leecode">leecode</h4>
<p>1#<a href="https://leetcode.com/problems/reverse-linked-list/" target="_blank">206. Reverse Linked List</a></p>
<blockquote>
  <p>Reverse a singly linked list.<br />
<br /><b>Example:</b>
<br />Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL
<br />Output: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL
<br />Follow up:
<br />A linked list can be reversed either iteratively or recursively. Could you implement both?</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func reverseList(head *ListNode) *ListNode {
    var prev ListNode
    cur:=head
	for cur != nil {
		prev.Next, cur.Next, cur = cur, prev.Next, cur.Next
	}
	return prev.Next
}
</code></pre></div></div>

<p>2#<a href="https://leetcode.com/problems/swap-nodes-in-pairs/" target="_blank">24. Swap Nodes in Pairs</a></p>

<blockquote>
  <p>Given a linked list, swap every two adjacent nodes and return its head.
<br />You may not modify the values in the listâ€™s nodes. Only nodes itself may be changed.<br />
<br /><b>Example 1:</b>
<br />Input: head = [1,2,3,4]
<br />Output: [2,1,4,3]
<br /><b>Example 2:</b>
<br />Input: head = []
<br />Output: []
<br /><b>Example 3:</b>
<br />Input: head = [1]
<br />Output: [1]</p>
</blockquote>

<p>3#<a href="https://leetcode.com/problems/linked-list-cycle/" target="_blank">141. Linked List Cycle</a></p>

<blockquote>
  <p>Given head, the head of a linked list, determine if the linked list has a cycle in it.
<br />There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tailâ€™s next pointer is connected to. Note that pos is not passed as a parameter.
<br />Return true if there is a cycle in the linked list. Otherwise, return false.
<br /><b>Example 1:</b>
<br />Input: head = [3,2,0,-4], pos = 1
<br />Output: true
<br />Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).
<br /><b>Example 2:</b>
<br />Input: head = [1,2], pos = 0
<br />Output: true
<br />Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.
<br /><b>Example 3:</b>
<br />Input: head = [1], pos = -1
<br />Output: false
<br />Explanation: There is no cycle in the linked list.
<br /><b>Constraints:</b>
<br />The number of the nodes in the list is in the range [0, 104].
<br />-105 &lt;= Node.val &lt;= 105
<br />pos is -1 or a valid index in the linked-list.</p>
</blockquote>

<p>4#<a href="https://leetcode.com/problems/linked-list-cycle-ii/" target="_blank">142. Linked List Cycle II</a></p>

<blockquote>
  <p>sdfsdfsdf</p>
</blockquote>

<p>5#<a href="https://leetcode.com/problems/reverse-nodes-in-k-group/" target="_blank">25. Reverse Nodes in k-Group</a></p>

<blockquote>
  <p>sdfsdfsdf</p>
</blockquote>
:ET