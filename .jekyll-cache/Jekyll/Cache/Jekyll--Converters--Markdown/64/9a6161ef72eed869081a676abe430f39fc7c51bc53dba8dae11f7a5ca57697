I"f<ul id="markdown-toc">
  <li><a href="#spring-注解" id="markdown-toc-spring-注解">Spring 注解</a></li>
  <li><a href="#bean作用域" id="markdown-toc-bean作用域">Bean作用域</a></li>
  <li><a href="#spring-事务隔离级别" id="markdown-toc-spring-事务隔离级别">Spring 事务隔离级别</a>    <ul>
      <li><a href="#未提交读" id="markdown-toc-未提交读">未提交读</a></li>
      <li><a href="#读写提交" id="markdown-toc-读写提交">读写提交</a></li>
      <li><a href="#可重复读" id="markdown-toc-可重复读">可重复读</a></li>
      <li><a href="#串行化" id="markdown-toc-串行化">串行化</a></li>
      <li><a href="#支持" id="markdown-toc-支持">支持</a></li>
    </ul>
  </li>
  <li><a href="#spring-mvc-注解" id="markdown-toc-spring-mvc-注解">Spring MVC 注解</a></li>
  <li><a href="#jsr-303-验证" id="markdown-toc-jsr-303-验证">JSR-303 验证</a></li>
</ul>
<h4 id="spring-注解">Spring 注解</h4>

<blockquote>
  <p>@Primary    当IOC 容器发现多个同样类型的Bean时，优先注入这个注解标识的Bean</p>

  <p>@Qualifier  相当于给Bean定义了唯一标识，便于IOC 注入</p>

  <p>@Value ${…}  读取配置文件中的值</p>

  <p>@Condition 装配前的判断状态</p>

  <p>@Profile</p>

  <p>​		 对应有Profile机制，以下两个配置项没有设置值时，被@Profile标注的类不会被加载到容器当中。</p>

  <p>​		 spring.profiles.active&gt;spring.profiles.default 优先级</p>

  <p>@DeclareParents 引入新类增强服务</p>

  <p>​		value:目标对象</p>

  <p>​		defaultImpl:引入增强功能的类</p>

</blockquote>

<h4 id="bean作用域">Bean作用域</h4>

<blockquote>
  <p>singleton 默认值，IoC只存在单例</p>

  <p>prototype 每次都初始化一个新的Bean</p>
</blockquote>

<h4 id="spring-事务隔离级别">Spring 事务隔离级别</h4>

<h5 id="未提交读">未提交读</h5>

<blockquote>
  <p>允许一个事务去读取另一个事务没有提交的数据。</p>

  <p>缺点： 脏读 不可重复读 幻读</p>
</blockquote>

<h5 id="读写提交">读写提交</h5>

<blockquote>
  <p>一个事务只能读取另一个事务已经提交的数据，不能读取未提交的数据</p>

  <p>缺点： 不可重复读 幻读</p>
</blockquote>

<h5 id="可重复读">可重复读</h5>

<blockquote>
  <p>缺点： 幻读</p>
</blockquote>

<h5 id="串行化">串行化</h5>

<blockquote>
  <p>所有SQL 按顺序执行</p>
</blockquote>

<h5 id="支持">支持</h5>

<blockquote>
  <p>MySQL 支持4种事务 默认事务：可重复读</p>

  <p>Oracle 支持 读写提交和串行化  默认事务：读写提交</p>
</blockquote>

<h4 id="spring-mvc-注解">Spring MVC 注解</h4>

<blockquote>
  <p>@RequestParam 构建请求参数与方法参数映射关系，默认是不能为空</p>

  <p>​		value 请求参数</p>

  <p>​                required   false  可为空</p>

  <p>@RequestBody 请求是JSON数据</p>

  <p>@DateTimeFormat 针对时间格式化</p>

  <p>​		不使用该注解，也可在application.properties 加如下配置：</p>

  <p>​		spring.mvc.date-format=yyyy-MM-dd</p>

  <p>@NumberFormat 针对数字格式化</p>
</blockquote>

<h4 id="jsr-303-验证">JSR-303 验证</h4>

<blockquote>
  <p>@NotNull  不能为空</p>

  <p>@Future 只能是将来的日期</p>

  <p>@DateTimeFormat(pattern=”yyyy-MM-dd”)</p>

  <p>@Past 只能是过去的日期</p>

  <p>@DecimalMin   最小值 Double</p>

  <p>@DecimalMax 最大值 Double</p>

  <p>@Min 最小值  Integer</p>

  <p>@Max 最大值 Integer</p>

  <p>@Range(min=1,max=99,message=”范围为1至99”)  限定范围</p>

  <p>@Email 邮箱格式校验</p>

  <p>@Size(min=20,max=30) String  字符串长度20-30</p>

  <p>注：接收参数用@Valid 验证，</p>

  <p>并添加参数  Errors errors</p>

  <p>用if(errors.hasErrors())  做判断</p>
</blockquote>

:ET